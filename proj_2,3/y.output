Terminals unused in grammar

    MINUS
    DIVIDE
    EQ
    NE
    LT
    LE
    GE
    GT
    POINT
    AND
    OR
    NOT
    DIV
    MOD
    IN
    LBRACKET
    RBRACKET
    DOTDOT
    ARRAY
    CASE
    CONST
    DOWNTO
    FILEFILE
    FUNCTION
    GOTO
    LABEL
    NIL
    OF
    PACKED
    PROCEDURE
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WHILE
    WITH


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock DOT

    2 idlist: IDENTIFIER COMMA idlist
    3       | IDENTIFIER

    4 vblock: VAR varspecs block
    5       | block

    6 varspecs: vargroup SEMICOLON varspecs
    7         | vargroup SEMICOLON

    8 vargroup: idlist COLON type

    9 type: simpletype

   10 simpletype: IDENTIFIER

   11 block: BEGINBEGIN statement endpart

   12 statement: BEGINBEGIN statement endpart
   13          | IF expr THEN statement endif
   14          | assignment
   15          | functionCall
   16          | FOR assignment TO expr DO statement

   17 expressionList: expr COMMA expressionList
   18               | expr

   19 functionCall: IDENTIFIER LPAREN expressionList RPAREN

   20 endpart: SEMICOLON statement endpart
   21        | END

   22 endif: ELSE statement
   23      | %empty

   24 assignment: variable ASSIGN expr

   25 expr: expr PLUS term
   26     | term

   27 term: term TIMES factor
   28     | factor

   29 factor: LPAREN expr RPAREN
   30       | variable
   31       | NUMBER
   32       | STRING

   33 variable: IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 1 2 3 10 19 33
    STRING (259) 32
    NUMBER (260) 31
    PLUS (261) 25
    MINUS (262)
    TIMES (263) 27
    DIVIDE (264)
    ASSIGN (265) 24
    EQ (266)
    NE (267)
    LT (268)
    LE (269)
    GE (270)
    GT (271)
    POINT (272)
    DOT (273) 1
    AND (274)
    OR (275)
    NOT (276)
    DIV (277)
    MOD (278)
    IN (279)
    COMMA (280) 2 17
    SEMICOLON (281) 1 6 7 20
    COLON (282) 8
    LPAREN (283) 1 19 29
    RPAREN (284) 1 19 29
    LBRACKET (285)
    RBRACKET (286)
    DOTDOT (287)
    ARRAY (288)
    BEGINBEGIN (289) 11 12
    CASE (290)
    CONST (291)
    DO (292) 16
    DOWNTO (293)
    ELSE (294) 22
    END (295) 21
    FILEFILE (296)
    FOR (297) 16
    FUNCTION (298)
    GOTO (299)
    IF (300) 13
    LABEL (301)
    NIL (302)
    OF (303)
    PACKED (304)
    PROCEDURE (305)
    PROGRAM (306) 1
    RECORD (307)
    REPEAT (308)
    SET (309)
    THEN (310) 13
    TO (311) 16
    TYPE (312)
    UNTIL (313)
    VAR (314) 4
    WHILE (315)
    WITH (316)
    thenthen (317)


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    program (64)
        on left: 1
        on right: 0
    idlist (65)
        on left: 2 3
        on right: 1 2 8
    vblock (66)
        on left: 4 5
        on right: 1
    varspecs (67)
        on left: 6 7
        on right: 4 6
    vargroup (68)
        on left: 8
        on right: 6 7
    type (69)
        on left: 9
        on right: 8
    simpletype (70)
        on left: 10
        on right: 9
    block (71)
        on left: 11
        on right: 4 5
    statement (72)
        on left: 12 13 14 15 16
        on right: 11 12 13 16 20 22
    expressionList (73)
        on left: 17 18
        on right: 17 19
    functionCall (74)
        on left: 19
        on right: 15
    endpart (75)
        on left: 20 21
        on right: 11 12 20
    endif (76)
        on left: 22 23
        on right: 13
    assignment (77)
        on left: 24
        on right: 14 16
    expr (78)
        on left: 25 26
        on right: 13 16 17 18 24 25 29
    term (79)
        on left: 27 28
        on right: 25 26 27
    factor (80)
        on left: 29 30 31 32
        on right: 27 28
    variable (81)
        on left: 33
        on right: 24 30


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock DOT

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENTIFIER . LPAREN idlist RPAREN SEMICOLON vblock DOT

    LPAREN  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENTIFIER LPAREN . idlist RPAREN SEMICOLON vblock DOT

    IDENTIFIER  shift, and go to state 6

    idlist  go to state 7


State 6

    2 idlist: IDENTIFIER . COMMA idlist
    3       | IDENTIFIER .

    COMMA  shift, and go to state 8

    $default  reduce using rule 3 (idlist)


State 7

    1 program: PROGRAM IDENTIFIER LPAREN idlist . RPAREN SEMICOLON vblock DOT

    RPAREN  shift, and go to state 9


State 8

    2 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 6

    idlist  go to state 10


State 9

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN . SEMICOLON vblock DOT

    SEMICOLON  shift, and go to state 11


State 10

    2 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 2 (idlist)


State 11

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON . vblock DOT

    BEGINBEGIN  shift, and go to state 12
    VAR         shift, and go to state 13

    vblock  go to state 14
    block   go to state 15


State 12

   11 block: BEGINBEGIN . statement endpart

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement     go to state 20
    functionCall  go to state 21
    assignment    go to state 22
    variable      go to state 23


State 13

    4 vblock: VAR . varspecs block

    IDENTIFIER  shift, and go to state 6

    idlist    go to state 24
    varspecs  go to state 25
    vargroup  go to state 26


State 14

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock . DOT

    DOT  shift, and go to state 27


State 15

    5 vblock: block .

    $default  reduce using rule 5 (vblock)


State 16

   19 functionCall: IDENTIFIER . LPAREN expressionList RPAREN
   33 variable: IDENTIFIER .

    LPAREN  shift, and go to state 28

    $default  reduce using rule 33 (variable)


State 17

   12 statement: BEGINBEGIN . statement endpart

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement     go to state 29
    functionCall  go to state 21
    assignment    go to state 22
    variable      go to state 23


State 18

   16 statement: FOR . assignment TO expr DO statement

    IDENTIFIER  shift, and go to state 30

    assignment  go to state 31
    variable    go to state 23


State 19

   13 statement: IF . expr THEN statement endif

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 35
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 20

   11 block: BEGINBEGIN statement . endpart

    SEMICOLON  shift, and go to state 39
    END        shift, and go to state 40

    endpart  go to state 41


State 21

   15 statement: functionCall .

    $default  reduce using rule 15 (statement)


State 22

   14 statement: assignment .

    $default  reduce using rule 14 (statement)


State 23

   24 assignment: variable . ASSIGN expr

    ASSIGN  shift, and go to state 42


State 24

    8 vargroup: idlist . COLON type

    COLON  shift, and go to state 43


State 25

    4 vblock: VAR varspecs . block

    BEGINBEGIN  shift, and go to state 12

    block  go to state 44


State 26

    6 varspecs: vargroup . SEMICOLON varspecs
    7         | vargroup . SEMICOLON

    SEMICOLON  shift, and go to state 45


State 27

    1 program: PROGRAM IDENTIFIER LPAREN idlist RPAREN SEMICOLON vblock DOT .

    $default  reduce using rule 1 (program)


State 28

   19 functionCall: IDENTIFIER LPAREN . expressionList RPAREN

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expressionList  go to state 46
    expr            go to state 47
    term            go to state 36
    factor          go to state 37
    variable        go to state 38


State 29

   12 statement: BEGINBEGIN statement . endpart

    SEMICOLON  shift, and go to state 39
    END        shift, and go to state 40

    endpart  go to state 48


State 30

   33 variable: IDENTIFIER .

    $default  reduce using rule 33 (variable)


State 31

   16 statement: FOR assignment . TO expr DO statement

    TO  shift, and go to state 49


State 32

   32 factor: STRING .

    $default  reduce using rule 32 (factor)


State 33

   31 factor: NUMBER .

    $default  reduce using rule 31 (factor)


State 34

   29 factor: LPAREN . expr RPAREN

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 50
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 35

   13 statement: IF expr . THEN statement endif
   25 expr: expr . PLUS term

    PLUS  shift, and go to state 51
    THEN  shift, and go to state 52


State 36

   26 expr: term .
   27 term: term . TIMES factor

    TIMES  shift, and go to state 53

    $default  reduce using rule 26 (expr)


State 37

   28 term: factor .

    $default  reduce using rule 28 (term)


State 38

   30 factor: variable .

    $default  reduce using rule 30 (factor)


State 39

   20 endpart: SEMICOLON . statement endpart

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement     go to state 54
    functionCall  go to state 21
    assignment    go to state 22
    variable      go to state 23


State 40

   21 endpart: END .

    $default  reduce using rule 21 (endpart)


State 41

   11 block: BEGINBEGIN statement endpart .

    $default  reduce using rule 11 (block)


State 42

   24 assignment: variable ASSIGN . expr

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 55
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 43

    8 vargroup: idlist COLON . type

    IDENTIFIER  shift, and go to state 56

    type        go to state 57
    simpletype  go to state 58


State 44

    4 vblock: VAR varspecs block .

    $default  reduce using rule 4 (vblock)


State 45

    6 varspecs: vargroup SEMICOLON . varspecs
    7         | vargroup SEMICOLON .

    IDENTIFIER  shift, and go to state 6

    $default  reduce using rule 7 (varspecs)

    idlist    go to state 24
    varspecs  go to state 59
    vargroup  go to state 26


State 46

   19 functionCall: IDENTIFIER LPAREN expressionList . RPAREN

    RPAREN  shift, and go to state 60


State 47

   17 expressionList: expr . COMMA expressionList
   18               | expr .
   25 expr: expr . PLUS term

    PLUS   shift, and go to state 51
    COMMA  shift, and go to state 61

    $default  reduce using rule 18 (expressionList)


State 48

   12 statement: BEGINBEGIN statement endpart .

    $default  reduce using rule 12 (statement)


State 49

   16 statement: FOR assignment TO . expr DO statement

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expr      go to state 62
    term      go to state 36
    factor    go to state 37
    variable  go to state 38


State 50

   25 expr: expr . PLUS term
   29 factor: LPAREN expr . RPAREN

    PLUS    shift, and go to state 51
    RPAREN  shift, and go to state 63


State 51

   25 expr: expr PLUS . term

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    term      go to state 64
    factor    go to state 37
    variable  go to state 38


State 52

   13 statement: IF expr THEN . statement endif

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement     go to state 65
    functionCall  go to state 21
    assignment    go to state 22
    variable      go to state 23


State 53

   27 term: term TIMES . factor

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    factor    go to state 66
    variable  go to state 38


State 54

   20 endpart: SEMICOLON statement . endpart

    SEMICOLON  shift, and go to state 39
    END        shift, and go to state 40

    endpart  go to state 67


State 55

   24 assignment: variable ASSIGN expr .
   25 expr: expr . PLUS term

    PLUS  shift, and go to state 51

    $default  reduce using rule 24 (assignment)


State 56

   10 simpletype: IDENTIFIER .

    $default  reduce using rule 10 (simpletype)


State 57

    8 vargroup: idlist COLON type .

    $default  reduce using rule 8 (vargroup)


State 58

    9 type: simpletype .

    $default  reduce using rule 9 (type)


State 59

    6 varspecs: vargroup SEMICOLON varspecs .

    $default  reduce using rule 6 (varspecs)


State 60

   19 functionCall: IDENTIFIER LPAREN expressionList RPAREN .

    $default  reduce using rule 19 (functionCall)


State 61

   17 expressionList: expr COMMA . expressionList

    IDENTIFIER  shift, and go to state 30
    STRING      shift, and go to state 32
    NUMBER      shift, and go to state 33
    LPAREN      shift, and go to state 34

    expressionList  go to state 68
    expr            go to state 47
    term            go to state 36
    factor          go to state 37
    variable        go to state 38


State 62

   16 statement: FOR assignment TO expr . DO statement
   25 expr: expr . PLUS term

    PLUS  shift, and go to state 51
    DO    shift, and go to state 69


State 63

   29 factor: LPAREN expr RPAREN .

    $default  reduce using rule 29 (factor)


State 64

   25 expr: expr PLUS term .
   27 term: term . TIMES factor

    TIMES  shift, and go to state 53

    $default  reduce using rule 25 (expr)


State 65

   13 statement: IF expr THEN statement . endif

    ELSE  shift, and go to state 70

    $default  reduce using rule 23 (endif)

    endif  go to state 71


State 66

   27 term: term TIMES factor .

    $default  reduce using rule 27 (term)


State 67

   20 endpart: SEMICOLON statement endpart .

    $default  reduce using rule 20 (endpart)


State 68

   17 expressionList: expr COMMA expressionList .

    $default  reduce using rule 17 (expressionList)


State 69

   16 statement: FOR assignment TO expr DO . statement

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement     go to state 72
    functionCall  go to state 21
    assignment    go to state 22
    variable      go to state 23


State 70

   22 endif: ELSE . statement

    IDENTIFIER  shift, and go to state 16
    BEGINBEGIN  shift, and go to state 17
    FOR         shift, and go to state 18
    IF          shift, and go to state 19

    statement     go to state 73
    functionCall  go to state 21
    assignment    go to state 22
    variable      go to state 23


State 71

   13 statement: IF expr THEN statement endif .

    $default  reduce using rule 13 (statement)


State 72

   16 statement: FOR assignment TO expr DO statement .

    $default  reduce using rule 16 (statement)


State 73

   22 endif: ELSE statement .

    $default  reduce using rule 22 (endif)
