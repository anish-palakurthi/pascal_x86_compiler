Comparing outputs/test00.output and samples/test00.sample (ignoring memory addresses, specific strings, and handling code splits):
21a22
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test01.output and samples/test01.sample (ignoring memory addresses, specific strings, and handling code splits):
21a22
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test02.output and samples/test02.sample (ignoring memory addresses, specific strings, and handling code splits):
24a25
> movq	%rax,-32(%rbp)     	#  %rax -> ptr
Comparing outputs/test03.output and samples/test03.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test04.output and samples/test04.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test05.output and samples/test05.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test06.output and samples/test06.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test07.output and samples/test07.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test08.output and samples/test08.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test09.output and samples/test09.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test10.output and samples/test10.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test11.output and samples/test11.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test12.output and samples/test12.sample (ignoring memory addresses, specific strings, and handling code splits):
24a25
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> x
Comparing outputs/test13.output and samples/test13.sample (ignoring memory addresses, specific strings, and handling code splits):
26a27
> movl	%eax,-32(%rbp)     	#  %eax -> i
29a31
> movl	%eax,-28(%rbp)     	#  %eax -> sum
32a35
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test14.output and samples/test14.sample (ignoring memory addresses, specific strings, and handling code splits):
7c7
< (progn (progn (label 0)
---
> (progn (label 0)
9,10c9,10
< (progn (progn (:= i (+ i 1)))
< (goto 0))))))
---
> (progn (:= i (+ i 1))
> (goto 0)))))
35a36
> movl	%eax,-24(%rbp)     	#  %eax -> i
Comparing outputs/test15.output and samples/test15.sample (ignoring memory addresses, specific strings, and handling code splits):
6c6
< (progn (progn (:= i 0)
---
> (progn (:= i 0)
11c11
< (goto 0))))))
---
> (goto 0)))))
27a28
> movl	%eax,-32(%rbp)     	#  %eax -> i
35a37
> movl	%eax,-28(%rbp)     	#  %eax -> n
38a41
> movl	%eax,-32(%rbp)     	#  %eax -> i
Comparing outputs/test16.output and samples/test16.sample (ignoring memory addresses, specific strings, and handling code splits):
7c7
< (progn (:= n (- n 1)))
---
> (:= n (- n 1))
26a27
> movl	%eax,-32(%rbp)     	#  %eax -> n
30a32
> movl	%eax,-32(%rbp)     	#  %eax -> n
Comparing outputs/test17.output and samples/test17.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test18.output and samples/test18.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test19.output and samples/test19.sample (ignoring memory addresses, specific strings, and handling code splits):
22a23
> movl	%eax,%edi         	#  %eax -> %edi
23a25
> movq	%rax,-32(%rbp)     	#  %rax -> john
Comparing outputs/test20.output and samples/test20.sample (ignoring memory addresses, specific strings, and handling code splits):
23a24
> movsd	%xmm0,-24(%rbp)     	#  %xmm0 -> y
Comparing outputs/test21.output and samples/test21.sample (ignoring memory addresses, specific strings, and handling code splits):
6c6
< (progn (:= n (fix (funcall iround x)))))
---
> (progn (:= n (funcall iround x))))
24c24
< cvttsd2si	%ecx,%edx    	#  fix %ecx -> %edx
---
> movl	%eax,-24(%rbp)     	#  %eax -> n
Comparing outputs/test22.output and samples/test22.sample (ignoring memory addresses, specific strings, and handling code splits):
24a25
> movsd	%xmm0,-8(%rbp)     	#  %xmm0 -> temp
27c28,30
< imull	%eax,%ecx         	#  %ecx * %eax -> %ecx
---
> movsd	-8(%rbp),%xmm1     	#  temp -> %xmm1
> mulsd	%xmm0,%xmm1         	#  %xmm1 * %xmm0 -> %xmm1
> movsd	%xmm1,-24(%rbp)     	#  %xmm1 -> y
Comparing outputs/test23.output and samples/test23.sample (ignoring memory addresses, specific strings, and handling code splits):
27a28,30
> movl	$96,%eax         	#  96 -> %eax
> cltq	                  	#  sign-extend
> movsd	%xmm0,-176(%rbp,%rax)	#  %xmm0 -> ac[%rax]
Comparing outputs/test24.output and samples/test24.sample (ignoring memory addresses, specific strings, and handling code splits):
27,28c27,30
< movl	$96,%ecx         	#  96 -> %ecx
< movsd	96(%rax),%xmm0         	#  ^.[96+%rax] -> %xmm0
---
> movl	$96,%eax         	#  96 -> %eax
> cltq	                  	#  sign-extend
> movsd	-192(%rbp,%rax),%xmm0         	#  ac[-192] -> %xmm0
> movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> y
Comparing outputs/test25.output and samples/test25.sample (ignoring memory addresses, specific strings, and handling code splits):
41a42,43
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
Comparing outputs/test26.output and samples/test26.sample (ignoring memory addresses, specific strings, and handling code splits):
42d41
< movq	$0,%rcx         	#  0 -> %rcx
43a43
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
Comparing outputs/test27.output and samples/test27.sample (ignoring memory addresses, specific strings, and handling code splits):
42a43,45
> movq	-32(%rbp),%rax     	#  john -> %rax
> movq	8(%rax),%rcx         	#  ^.[8+%rax] -> %rcx
> movsd	%xmm0,24(%rcx)         	#  %xmm0 -> ^. [24+%rcx]
Comparing outputs/test28.output and samples/test28.sample (ignoring memory addresses, specific strings, and handling code splits):
43d42
< movq	$8,%rcx         	#  8 -> %rcx
45d43
< movq	$24,%rax         	#  24 -> %rax
46a45
> movsd	%xmm0,-24(%rbp)     	#  %xmm0 -> y
Comparing outputs/test29.output and samples/test29.sample (ignoring memory addresses, specific strings, and handling code splits):
56a57,58
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
57a60,61
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
58a63,64
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
59a66,67
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
60a69,70
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
61a72,73
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
Comparing outputs/test30.output and samples/test30.sample (ignoring memory addresses, specific strings, and handling code splits):
52d51
< movq	$0,%rcx         	#  0 -> %rcx
54c53,54
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
56c56,57
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
58c59,60
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
60c62,63
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
62c65,66
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
63a68
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
52d51
< movq	$0,%rcx         	#  0 -> %rcx
54c53,54
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
56c56,57
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
58c59,60
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
60c62,63
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
62c65,66
< movq	$0,%rcx         	#  0 -> %rcx
---
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
> movq	-32(%rbp),%rax     	#  john -> %rax
63a68
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
