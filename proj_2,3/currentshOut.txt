Comparing outputs/test00.output and samples/test00.sample (ignoring memory addresses, specific strings, and handling code splits):
21,24d20
< genarith
< code:
< 1
< code->tokentype: 5
Comparing outputs/test01.output and samples/test01.sample (ignoring memory addresses, specific strings, and handling code splits):
21,24d20
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
Comparing outputs/test02.output and samples/test02.sample (ignoring memory addresses, specific strings, and handling code splits):
24,27d23
< genarith
< code:
< john
< code->tokentype: 3
Comparing outputs/test03.output and samples/test03.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (+ i 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
33,36d21
< genarith
< code:
< 1
< code->tokentype: 5
Comparing outputs/test04.output and samples/test04.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (- i 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
33,36d21
< genarith
< code:
< 1
< code->tokentype: 5
Comparing outputs/test05.output and samples/test05.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (* i 2)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
33,36d21
< genarith
< code:
< 2
< code->tokentype: 5
Comparing outputs/test06.output and samples/test06.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (/ i 2)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
33,36d21
< genarith
< code:
< 2
< code->tokentype: 5
Comparing outputs/test07.output and samples/test07.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (+ x 4.500000e+00)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< x
< genarith
< code:
< x
< code->tokentype: 3
33,36d21
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
Comparing outputs/test08.output and samples/test08.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (- x 4.500000e+00)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< x
< genarith
< code:
< x
< code->tokentype: 3
33,36d21
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
Comparing outputs/test09.output and samples/test09.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (* x 4.500000e+00)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< x
< genarith
< code:
< x
< code->tokentype: 3
33,36d21
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
Comparing outputs/test10.output and samples/test10.sample (ignoring memory addresses, specific strings, and handling code splits):
21,31d20
< genarith
< code:
< (/ x 4.500000e+00)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< x
< genarith
< code:
< x
< code->tokentype: 3
33,36d21
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
Comparing outputs/test11.output and samples/test11.sample (ignoring memory addresses, specific strings, and handling code splits):
22,32d21
< genarith
< code:
< (float i)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
Comparing outputs/test12.output and samples/test12.sample (ignoring memory addresses, specific strings, and handling code splits):
22,32d21
< genarith
< code:
< (- y)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< y
< genarith
< code:
< y
< code->tokentype: 3
Comparing outputs/test13.output and samples/test13.sample (ignoring memory addresses, specific strings, and handling code splits):
24,34d23
< genarith
< code:
< (+ i 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
36,39d24
< genarith
< code:
< 1
< code->tokentype: 5
43,53d27
< genarith
< code:
< (+ sum 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< sum
< genarith
< code:
< sum
< code->tokentype: 3
55,58d28
< genarith
< code:
< 1
< code->tokentype: 5
62,72d31
< genarith
< code:
< (+ i sum)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
74,77d32
< genarith
< code:
< sum
< code->tokentype: 3
Comparing outputs/test14.output and samples/test14.sample (ignoring memory addresses, specific strings, and handling code splits):
7c7
< (progn (progn (label 0)
---
> (progn (label 0)
9,10c9,10
< (progn (progn (:= i (+ i 1)))
< (goto 0))))))
---
> (progn (:= i (+ i 1))
> (goto 0)))))
27,37d26
< genarith
< code:
< (<> ptr 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< ptr
< genarith
< code:
< ptr
< code->tokentype: 3
39,42d27
< genarith
< code:
< 0
< code->tokentype: 5
48,58d32
< genarith
< code:
< (+ i 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
60,63d33
< genarith
< code:
< 1
< code->tokentype: 5
Comparing outputs/test15.output and samples/test15.sample (ignoring memory addresses, specific strings, and handling code splits):
6c6
< (progn (progn (:= i 0)
---
> (progn (:= i 0)
11c11
< (goto 0))))))
---
> (goto 0)))))
27,30d26
< genarith
< code:
< 0
< code->tokentype: 5
34,44d29
< genarith
< code:
< (<= i 32)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
46,49d30
< genarith
< code:
< 32
< code->tokentype: 5
55,58d35
< genarith
< code:
< 1
< code->tokentype: 5
61,71d37
< genarith
< code:
< (+ i 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< i
< genarith
< code:
< i
< code->tokentype: 3
73,76d38
< genarith
< code:
< 1
< code->tokentype: 5
Comparing outputs/test16.output and samples/test16.sample (ignoring memory addresses, specific strings, and handling code splits):
7c7
< (progn (:= n (- n 1)))
---
> (:= n (- n 1))
26,29d25
< genarith
< code:
< 1
< code->tokentype: 5
33,43d28
< genarith
< code:
< (- n 1)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< n
< genarith
< code:
< n
< code->tokentype: 3
45,48d29
< genarith
< code:
< 1
< code->tokentype: 5
52,62d32
< genarith
< code:
< (= n 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< n
< genarith
< code:
< n
< code->tokentype: 3
64,67d33
< genarith
< code:
< 0
< code->tokentype: 5
Comparing outputs/test17.output and samples/test17.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test18.output and samples/test18.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test19.output and samples/test19.sample (ignoring memory addresses, specific strings, and handling code splits):
22,37d21
< genarith
< code:
< (funcall new 8)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< new
< genarith
< code:
< new
< code->tokentype: 3
< code->link->tokentype: 5
< genarith
< code:
< 8
< code->tokentype: 5
39,40c23,25
< INLINE HANDLING
< movsd	%xmm0,-32(%rbp)     	#  %xmm0 -> john
---
> movl	%eax,%edi         	#  %eax -> %edi
> call	new@PLT          	#  new()
> movq	%rax,-32(%rbp)     	#  %rax -> john
Comparing outputs/test20.output and samples/test20.sample (ignoring memory addresses, specific strings, and handling code splits):
6c6
< (progn (:= y (funcall exp (- x)))))
---
> (progn (:= y (funcall exp x))))
22,44d21
< genarith
< code:
< (funcall exp (- x))
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< exp
< genarith
< code:
< exp
< code->tokentype: 3
< code->link->tokentype: 0
< genarith
< code:
< (- x)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< x
< genarith
< code:
< x
< code->tokentype: 3
46,48c23
< movsd	.LC666(%rip),%xmm1   	#  0.000000 -> %xmm1
< xorpd	%xmm1,%xmm0           	#  negate %xmm0
< INLINE HANDLING
---
> call	exp@PLT          	#  exp()
59,64d33
< .align 16
< .LC666:                    # constant for floating negation
< .long	0
< .long	-2147483648
< .long	0
< .long	0
Comparing outputs/test21.output and samples/test21.sample (ignoring memory addresses, specific strings, and handling code splits):
0a1,34
> yyparse result =        0
> Symbol table level 1
> x  VAR    1 typ    real  lvl  1  siz     8  off     0
> n  VAR    0 typ integer  lvl  1  siz     4  off     8
> (program graph1 (progn output)
> (progn (:= n (funcall iround x))))
> .file   "foo"
> .text
> .globl graph1
> .type   graph1, @function
> graph1:
> .LFB0:
> .cfi_startproc
> pushq	%rbp              # save base pointer on stack
> .cfi_def_cfa_offset 16
> movq	%rsp, %rbp        # move stack pointer to base pointer
> .cfi_offset 6, -16
> .cfi_def_cfa_register 6
> subq	$32, %rsp 	  # make space for this stack frame
> movq	%rbx, %r9        # save %rbx (callee-saved) in %r9
> # ------------------------- begin Your code -----------------------------
> movsd	-32(%rbp),%xmm0     	#  x -> %xmm0
> call	iround@PLT          	#  iround()
> movl	%eax,-24(%rbp)     	#  %eax -> n
> # ----------------------- begin Epilogue code ---------------------------
> movq	%r9, %rbx        # restore %rbx (callee-saved) from %r9
> leave
> ret
> .cfi_endproc
> .LFE0:
> .size   graph1, .-graph1
> # ----------------- end Epilogue; Literal data follows ------------------
> .section        .rodata
> .ident  "CS 375 Compiler - XXXX"
Comparing outputs/test22.output and samples/test22.sample (ignoring memory addresses, specific strings, and handling code splits):
0a1,40
> yyparse result =        0
> Symbol table level 1
> x  VAR    1 typ    real  lvl  1  siz     8  off     0
> y  VAR    1 typ    real  lvl  1  siz     8  off     8
> (program graph1 (progn output)
> (progn (:= y (* (funcall exp x)
> (funcall sin x)))))
> .file   "foo"
> .text
> .globl graph1
> .type   graph1, @function
> graph1:
> .LFB0:
> .cfi_startproc
> pushq	%rbp              # save base pointer on stack
> .cfi_def_cfa_offset 16
> movq	%rsp, %rbp        # move stack pointer to base pointer
> .cfi_offset 6, -16
> .cfi_def_cfa_register 6
> subq	$32, %rsp 	  # make space for this stack frame
> movq	%rbx, %r9        # save %rbx (callee-saved) in %r9
> # ------------------------- begin Your code -----------------------------
> movsd	-32(%rbp),%xmm0     	#  x -> %xmm0
> call	exp@PLT          	#  exp()
> movsd	%xmm0,-8(%rbp)     	#  %xmm0 -> temp
> movsd	-32(%rbp),%xmm0     	#  x -> %xmm0
> call	sin@PLT          	#  sin()
> movsd	-8(%rbp),%xmm1     	#  temp -> %xmm1
> mulsd	%xmm0,%xmm1         	#  %xmm1 * %xmm0 -> %xmm1
> movsd	%xmm1,-24(%rbp)     	#  %xmm1 -> y
> # ----------------------- begin Epilogue code ---------------------------
> movq	%r9, %rbx        # restore %rbx (callee-saved) from %r9
> leave
> ret
> .cfi_endproc
> .LFE0:
> .size   graph1, .-graph1
> # ----------------- end Epilogue; Literal data follows ------------------
> .section        .rodata
> .ident  "CS 375 Compiler - XXXX"
Comparing outputs/test23.output and samples/test23.sample (ignoring memory addresses, specific strings, and handling code splits):
27,30d26
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
35,38d30
< genarith
< code:
< ac
< code->tokentype: 3
Comparing outputs/test24.output and samples/test24.sample (ignoring memory addresses, specific strings, and handling code splits):
27,43c27,29
< genarith
< code:
< (aref ac 96)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< ac
< genarith
< code:
< ac
< code->tokentype: 3
< genarith
< code:
< 96
< code->tokentype: 5
< movl	$96,%ecx         	#  96 -> %ecx
< movsd	96(%rax),%xmm0         	#  ^.[96+%rax] -> %xmm0
---
> movl	$96,%eax         	#  96 -> %eax
> cltq	                  	#  sign-extend
> movsd	-192(%rbp,%rax),%xmm0         	#  ac[-192] -> %xmm0
Comparing outputs/test25.output and samples/test25.sample (ignoring memory addresses, specific strings, and handling code splits):
41,44d40
< genarith
< code:
< 19
< code->tokentype: 5
48,58d43
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
Comparing outputs/test26.output and samples/test26.sample (ignoring memory addresses, specific strings, and handling code splits):
41,59d40
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
61,64d41
< genarith
< code:
< 0
< code->tokentype: 5
Comparing outputs/test27.output and samples/test27.sample (ignoring memory addresses, specific strings, and handling code splits):
42,45d41
< genarith
< code:
< 4.500000e+00
< code->tokentype: 5
47,74d42
< genarith
< code:
< (^ (aref (^ john)
< 8))
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (aref (^ john)
< 8)
< genarith
< code:
< (aref (^ john)
< 8)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
76,79d43
< genarith
< code:
< 8
< code->tokentype: 5
Comparing outputs/test28.output and samples/test28.sample (ignoring memory addresses, specific strings, and handling code splits):
42,79d41
< genarith
< code:
< (aref (^ (aref (^ john)
< 8))
< 24)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ (aref (^ john)
< 8))
< genarith
< code:
< (^ (aref (^ john)
< 8))
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (aref (^ john)
< 8)
< genarith
< code:
< (aref (^ john)
< 8)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
81,84d42
< genarith
< code:
< 8
< code->tokentype: 5
86,89d43
< genarith
< code:
< 24
< code->tokentype: 5
Comparing outputs/test29.output and samples/test29.sample (ignoring memory addresses, specific strings, and handling code splits):
56,163c56,73
< genarith
< code:
< 19
< code->tokentype: 5
< movl	$19,%eax         	#  19 -> %eax
< movq	-32(%rbp),%rcx     	#  john -> %rcx
< movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< genarith
< code:
< 19
< code->tokentype: 5
< movl	$19,%eax         	#  19 -> %eax
< movq	-32(%rbp),%rcx     	#  john -> %rcx
< movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< genarith
< code:
< 19
< code->tokentype: 5
< movl	$19,%eax         	#  19 -> %eax
< movq	-32(%rbp),%rcx     	#  john -> %rcx
< movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< genarith
< code:
< 19
< code->tokentype: 5
< movl	$19,%eax         	#  19 -> %eax
< movq	-32(%rbp),%rcx     	#  john -> %rcx
< movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< genarith
< code:
< 19
< code->tokentype: 5
< movl	$19,%eax         	#  19 -> %eax
< movq	-32(%rbp),%rcx     	#  john -> %rcx
< movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< genarith
< code:
< 19
< code->tokentype: 5
< movl	$19,%eax         	#  19 -> %eax
< movq	-32(%rbp),%rcx     	#  john -> %rcx
< movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
---
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
Comparing outputs/test30.output and samples/test30.sample (ignoring memory addresses, specific strings, and handling code splits):
51,74c51
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
77,100c54
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
103,126c57
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
129,152c60
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
155,178c63
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
181,204c66
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
eax -> ^. [0+%rcx]
> movl	$19,%eax         	#  19 -> %eax
> movq	-32(%rbp),%rcx     	#  john -> %rcx
> movl	%eax,0(%rcx)         	#  %eax -> ^. [0+%rcx]
Comparing outputs/test30.output and samples/test30.sample (ignoring memory addresses, specific strings, and handling code splits):
51,74c51
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
77,100c54
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
103,126c57
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
129,152c60
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
155,178c63
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
181,204c66
< genarith
< code:
< (aref (^ john)
< 0)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< (^ john)
< genarith
< code:
< (^ john)
< code->tokentype: 0
< OPERATOR tokentype in genarith
< code->operands:
< john
< genarith
< code:
< john
< code->tokentype: 3
< movq	-32(%rbp),%rax     	#  john -> %rax
< genarith
< code:
< 0
< code->tokentype: 5
---
> movq	-32(%rbp),%rax     	#  john -> %rax
