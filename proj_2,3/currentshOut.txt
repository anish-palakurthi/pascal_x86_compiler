Comparing outputs/test00.output and samples/test00.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test01.output and samples/test01.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test02.output and samples/test02.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test03.output and samples/test03.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test04.output and samples/test04.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test05.output and samples/test05.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test06.output and samples/test06.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test07.output and samples/test07.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test08.output and samples/test08.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test09.output and samples/test09.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test10.output and samples/test10.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test11.output and samples/test11.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test12.output and samples/test12.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test13.output and samples/test13.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test14.output and samples/test14.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test15.output and samples/test15.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test16.output and samples/test16.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test17.output and samples/test17.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test18.output and samples/test18.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test19.output and samples/test19.sample (ignoring memory addresses, specific strings, and handling code splits):
18c18
< movq	%rcx,-32(%rbp)     	#  %rcx -> john
---
> movq	%rax,-32(%rbp)     	#  %rax -> john
Comparing outputs/test20.output and samples/test20.sample (ignoring memory addresses, specific strings, and handling code splits):
17c17
< movsd	%xmm1,-24(%rbp)     	#  %xmm1 -> y
---
> movsd	%xmm0,-24(%rbp)     	#  %xmm0 -> y
Comparing outputs/test21.output and samples/test21.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test22.output and samples/test22.sample (ignoring memory addresses, specific strings, and handling code splits):
17c17
< movsd	%xmm1,-8(%rbp)     	#  %xmm1 -> temp
---
> movsd	%xmm0,-8(%rbp)     	#  %xmm0 -> temp
21,22c21,22
< mulsd	%xmm1,%xmm0         	#  %xmm0 * %xmm1 -> %xmm0
< movsd	%xmm0,-24(%rbp)     	#  %xmm0 -> y
---
> mulsd	%xmm0,%xmm1         	#  %xmm1 * %xmm0 -> %xmm1
> movsd	%xmm1,-24(%rbp)     	#  %xmm1 -> y
Comparing outputs/test23.output and samples/test23.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test24.output and samples/test24.sample (ignoring memory addresses, specific strings, and handling code splits):
15,16c15,17
< movl	$96,%ecx         	#  96 -> %ecx
< movsd	96(%rax),%xmm0         	#  ^.[96+%rax] -> %xmm0
---
> movl	$96,%eax         	#  96 -> %eax
> cltq	                  	#  sign-extend
> movsd	-192(%rbp,%rax),%xmm0         	#  ac[-192] -> %xmm0
Comparing outputs/test25.output and samples/test25.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test26.output and samples/test26.sample (ignoring memory addresses, specific strings, and handling code splits):
16,17c16,17
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
Comparing outputs/test27.output and samples/test27.sample (ignoring memory addresses, specific strings, and handling code splits):
17,18c17,18
< movq	8(%rcx),%rax         	#  ^.[8+%rcx] -> %rax
< movsd	%xmm0,24(%rax)         	#  %xmm0 -> ^. [24+%rax]
---
> movq	8(%rax),%rcx         	#  ^.[8+%rax] -> %rcx
> movsd	%xmm0,24(%rcx)         	#  %xmm0 -> ^. [24+%rcx]
Comparing outputs/test28.output and samples/test28.sample (ignoring memory addresses, specific strings, and handling code splits):
16,17c16,17
< movq	8(%rcx),%rax         	#  ^.[8+%rcx] -> %rax
< movsd	24(%rdx),%xmm0         	#  ^.[24+%rdx] -> %xmm0
---
> movq	8(%rax),%rcx         	#  ^.[8+%rax] -> %rcx
> movsd	24(%rcx),%xmm0         	#  ^.[24+%rcx] -> %xmm0
Comparing outputs/test29.output and samples/test29.sample (ignoring memory addresses, specific strings, and handling code splits):
Comparing outputs/test30.output and samples/test30.sample (ignoring memory addresses, specific strings, and handling code splits):
16,17c16,17
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
19,20c19,20
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
22,23c22,23
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
25,26c25,26
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
28,29c28,29
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
31,32c31,32
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
16,17c16,17
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
19,20c19,20
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
22,23c22,23
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
25,26c25,26
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
28,29c28,29
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
31,32c31,32
< movl	0(%rcx),%eax         	#  ^.[0+%rcx] -> %eax
< movl	%eax,-24(%rbp)     	#  %eax -> sum
---
> movl	0(%rax),%ecx         	#  ^.[0+%rax] -> %ecx
> movl	%ecx,-24(%rbp)     	#  %ecx -> sum
